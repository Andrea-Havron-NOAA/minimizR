Introducing the Fisheries Integrated Modeling System (FIMS)
================

## Fisheries Integrated Modeling System

The NOAA Fisheries Integrated Modeling System (FIMS) is a new modeling
framework for fisheries modeling. FIMS is a software system designed and
architected to support next-generation fisheries stock assessment,
ecosystem, and socioeconomic modeling. It’s important to note that FIMS
itself is not a model, but rather a framework for creating models. The
framework is made up of many modules that come together to create a “the
best model” that suites the needs of the end-user. What follows is a
demo of creating a catch-at-age assessment model using FIMS.

## Creating Models in FIMS

To begin, we import the FIMS and TMB libraries. We then create a new
Rcpp fims module using `Rcpp::Module` and call `fims$clear` to ensure
C++ memory from any previous fims model run is cleared out.

``` r
#install from test-estimation branch
#remotes::install_github("NOAA-FIMS/FIMS@integration-test-estimation-R-clear-FIMS")
library(FIMS)
library(TMB)
library(minimizR)

#load the module
fims <- Rcpp::Module("fims", PACKAGE = "FIMS")
fims$clear()
```

## Setting up Data

Data and variable values are taken from the [Li et.
al.](https://spo.nmfs.noaa.gov/content/fishery-bulletin/comparison-4-primary-age-structured-stock-assessment-models-used-united)
Model Comparison project ([github
site](https://github.com/Bai-Li-NOAA/Age_Structured_Stock_Assessment_Model_Comparison)).
See
[R/data_mile1.R](https://github.com/NOAA-FIMS/FIMS/blob/main/R/data_mile1.R)
and
[tests/testthat/test-fims-estimation.R](https://github.com/NOAA-FIMS/FIMS/blob/integration-test-estimation-R-clear-FIMS/tests/testthat/test-fims-estimation.R)
for details on how data and variable values are read into FIMS from the
Model Comparison project.

First let’s set up the dimensions of the model based on the Model
Comparison project:

``` r
nyears <- 30 # the number of years which we have data for.
nseanons<- 1 # the number of seasons in each year. FIMS currently defaults to 1
ages <- c(1,2,3,4,5,6,7,8,9,10,11,12) # age vector.
nages <- 12 # the number of age groups.
```

### Preparing Data using FIMSFrame

We will be reading data into the model using the FIMSFrame and
FIMSFrameAge S4 R classes set up in
[R/fimsframe.R](https://github.com/NOAA-FIMS/FIMS/blob/main/R/fimsframe.R)

``` r
#use FIMS data frame
data(package = "FIMS")
fims_frame <- FIMSFrame(data_mile1)
```

The `fims_frame` object contains a `@data` slot that holds a long data
frame with catch data for the fishery and index data for the survey:

``` r
str(fims_frame)
```

    ## Formal class 'FIMSFrame' [package "FIMS"] with 3 slots
    ##   ..@ data  :'data.frame':   1140 obs. of  8 variables:
    ##   .. ..$ type       : chr [1:1140] "landings" "landings" "landings" "landings" ...
    ##   .. ..$ name       : chr [1:1140] "fleet1" "fleet1" "fleet1" "fleet1" ...
    ##   .. ..$ age        : int [1:1140] NA NA NA NA NA NA NA NA NA NA ...
    ##   .. ..$ datestart  : chr [1:1140] "0001-01-01" "0002-01-01" "0003-01-01" "0004-01-01" ...
    ##   .. ..$ dateend    : chr [1:1140] "0001-12-31" "0002-12-31" "0003-12-31" "0004-12-31" ...
    ##   .. ..$ value      : num [1:1140] 160 461 752 997 770 ...
    ##   .. ..$ unit       : chr [1:1140] "mt" "mt" "mt" "mt" ...
    ##   .. ..$ uncertainty: num [1:1140] 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 ...
    ##   ..@ fleets: num 1
    ##   ..@ nyrs  : int 30

``` r
fims_frame@data %>% dplyr::filter(type == "landings") %>% head()
```

    ##       type   name age  datestart    dateend     value unit uncertainty
    ## 1 landings fleet1  NA 0001-01-01 0001-12-31  160.2363   mt        0.01
    ## 2 landings fleet1  NA 0002-01-01 0002-12-31  460.6336   mt        0.01
    ## 3 landings fleet1  NA 0003-01-01 0003-12-31  752.1299   mt        0.01
    ## 4 landings fleet1  NA 0004-01-01 0004-12-31  996.9872   mt        0.01
    ## 5 landings fleet1  NA 0005-01-01 0005-12-31  769.6972   mt        0.01
    ## 6 landings fleet1  NA 0006-01-01 0006-12-31 1352.7309   mt        0.01

``` r
fims_frame@data %>% dplyr::filter(type == "index") %>% head()
```

    ##    type    name age  datestart    dateend    value unit uncertainty
    ## 1 index survey1  NA 0001-01-01 0001-01-01 1.495423              0.2
    ## 2 index survey1  NA 0002-01-01 0002-01-01 1.398422              0.2
    ## 3 index survey1  NA 0003-01-01 0003-01-01 1.383065              0.2
    ## 4 index survey1  NA 0004-01-01 0004-01-01 1.328344              0.2
    ## 5 index survey1  NA 0005-01-01 0005-01-01 1.666170              0.2
    ## 6 index survey1  NA 0006-01-01 0006-01-01 1.720712              0.2

Using this data frame, we will start setting up the fims data objects.
This example from the Model Comparison project sets up a single fishery
fleet with age composition and catch data and a single survey with age
composition data and an index. Data are read into fims as long vectors,
regardless of their original dimension, hence the motivation behind the
long data frames created with the fimsframe S4 classes.

``` r
#fishery data
fishery_catch <- fims_frame@data %>% 
  dplyr::filter( type == "landings" ) %>%
  .$value 
#fishery agecomp not set up in fimsframe yet
fishery_agecomp <-c(
  0.065, 0.110, 0.120, 0.115, 0.100, 0.065, 0.075, 0.065, 0.070, 0.040, 0.035, 0.140, 
  0.130, 0.095, 0.120, 0.140, 0.080, 0.080, 0.055, 0.075, 0.030, 0.045, 0.030, 0.120, 
  0.050, 0.175, 0.110, 0.150, 0.090, 0.090, 0.075, 0.050, 0.025, 0.025, 0.025, 0.135, 
  0.035, 0.075, 0.215, 0.095, 0.095, 0.060, 0.065, 0.060, 0.055, 0.055, 0.045, 0.145, 
  0.170, 0.040, 0.125, 0.190, 0.090, 0.075, 0.065, 0.060, 0.045, 0.025, 0.030, 0.085, 
  0.085, 0.155, 0.075, 0.100, 0.155, 0.070, 0.095, 0.060, 0.035, 0.040, 0.040, 0.090, 
  0.070, 0.190, 0.260, 0.070, 0.060, 0.110, 0.045, 0.050, 0.030, 0.035, 0.015, 0.065, 
  0.075, 0.105, 0.190, 0.240, 0.065, 0.035, 0.065, 0.030, 0.030, 0.045, 0.025, 0.095, 
  0.075, 0.120, 0.100, 0.170, 0.220, 0.045, 0.050, 0.055, 0.030, 0.035, 0.015, 0.085, 
  0.120, 0.110, 0.175, 0.135, 0.145, 0.115, 0.025, 0.030, 0.030, 0.025, 0.015, 0.075, 
  0.075, 0.130, 0.155, 0.130, 0.050, 0.130, 0.135, 0.025, 0.045, 0.050, 0.020, 0.055, 
  0.050, 0.160, 0.175, 0.120, 0.115, 0.110, 0.050, 0.080, 0.020, 0.020, 0.025, 0.075, 
  0.085, 0.105, 0.120, 0.185, 0.110, 0.105, 0.075, 0.050, 0.065, 0.015, 0.005, 0.080, 
  0.090, 0.120, 0.130, 0.140, 0.150, 0.060, 0.100, 0.025, 0.050, 0.025, 0.030, 0.080, 
  0.105, 0.200, 0.120, 0.100, 0.115, 0.100, 0.075, 0.045, 0.010, 0.035, 0.020, 0.075, 
  0.130, 0.125, 0.195, 0.185, 0.080, 0.065, 0.020, 0.020, 0.050, 0.015, 0.050, 0.065, 
  0.120, 0.170, 0.165, 0.160, 0.070, 0.050, 0.060, 0.045, 0.030, 0.020, 0.020, 0.090, 
  0.075, 0.180, 0.230, 0.130, 0.095, 0.040, 0.040, 0.050, 0.045, 0.015, 0.020, 0.080, 
  0.115, 0.095, 0.230, 0.190, 0.100, 0.090, 0.025, 0.020, 0.040, 0.035, 0.015, 0.045, 
  0.075, 0.145, 0.130, 0.200, 0.180, 0.045, 0.045, 0.060, 0.020, 0.025, 0.010, 0.065, 
  0.180, 0.140, 0.175, 0.085, 0.165, 0.075, 0.055, 0.035, 0.015, 0.020, 0.010, 0.045, 
  0.130, 0.255, 0.100, 0.120, 0.050, 0.120, 0.080, 0.040, 0.030, 0.015, 0.020, 0.040, 
  0.095, 0.255, 0.270, 0.075, 0.080, 0.040, 0.065, 0.035, 0.050, 0.005, 0.010, 0.020, 
  0.060, 0.195, 0.290, 0.220, 0.055, 0.055, 0.015, 0.045, 0.020, 0.010, 0.010, 0.025, 
  0.180, 0.175, 0.175, 0.205, 0.140, 0.020, 0.050, 0.020, 0.015, 0.010, 0.000, 0.010, 
  0.100, 0.195, 0.180, 0.160, 0.170, 0.085, 0.045, 0.015, 0.015, 0.020, 0.015, 0.000, 
  0.155, 0.170, 0.220, 0.115, 0.080, 0.085, 0.080, 0.010, 0.025, 0.020, 0.005, 0.035, 
  0.180, 0.225, 0.125, 0.220, 0.100, 0.070, 0.040, 0.035, 0.005, 0.000, 0.000, 0.000, 
  0.230, 0.250, 0.125, 0.085, 0.125, 0.045, 0.030, 0.025, 0.045, 0.015, 0.010, 0.015, 
  0.155, 0.290, 0.215, 0.105, 0.085, 0.090, 0.020, 0.010, 0.010, 0.000, 0.005, 0.015)

#survey data
survey_index <- fims_frame@data %>% 
  dplyr::filter( type == "index" ) %>%
  .$value 

#survey agecomp not set up in fimsframe yet
survey_agecomp <- c(0.085, 0.115, 0.175, 0.130, 0.085, 0.055, 0.075, 0.065, 0.050, 0.025,
0.040, 0.100, 0.080, 0.140, 0.130, 0.135, 0.100, 0.075, 0.080, 0.060,
0.030, 0.045, 0.015, 0.110, 0.080, 0.250, 0.100, 0.105, 0.105, 0.055,
0.060, 0.040, 0.025, 0.030, 0.025, 0.125, 0.070, 0.105, 0.255, 0.105,
0.085, 0.065, 0.075, 0.035, 0.040, 0.045, 0.015, 0.105, 0.115, 0.065,
0.095, 0.230, 0.080, 0.070, 0.090, 0.025, 0.040, 0.025, 0.030, 0.135,
0.120, 0.230, 0.075, 0.105, 0.145, 0.060, 0.075, 0.045, 0.015, 0.005,
0.035, 0.090, 0.025, 0.190, 0.285, 0.050, 0.065, 0.085, 0.050, 0.045,
0.040, 0.045, 0.025, 0.095, 0.115, 0.085, 0.175, 0.205, 0.075, 0.075,
0.070, 0.025, 0.040, 0.030, 0.030, 0.075, 0.080, 0.200, 0.135, 0.195,
0.105, 0.025, 0.045, 0.080, 0.030, 0.020, 0.010, 0.075, 0.100, 0.125,
0.200, 0.095, 0.155, 0.095, 0.035, 0.030, 0.055, 0.015, 0.015, 0.080,
0.070, 0.190, 0.125, 0.150, 0.100, 0.115, 0.110, 0.010, 0.025, 0.030,
0.010, 0.065, 0.035, 0.285, 0.215, 0.110, 0.070, 0.060, 0.090, 0.050,
0.005, 0.015, 0.020, 0.045, 0.040, 0.115, 0.195, 0.180, 0.115, 0.115,
0.040, 0.055, 0.060, 0.005, 0.010, 0.070, 0.085, 0.160, 0.155, 0.135,
0.170, 0.050, 0.080, 0.015, 0.055, 0.035, 0.015, 0.045, 0.045, 0.205,
0.195, 0.145, 0.120, 0.100, 0.025, 0.045, 0.025, 0.035, 0.035, 0.025,
0.120, 0.145, 0.210, 0.155, 0.075, 0.070, 0.065, 0.035, 0.045, 0.015,
0.015, 0.050, 0.110, 0.210, 0.155, 0.170, 0.100, 0.075, 0.050, 0.015,
0.045, 0.040, 0.015, 0.015, 0.060, 0.295, 0.210, 0.075, 0.115, 0.075,
0.045, 0.045, 0.045, 0.015, 0.000, 0.020, 0.065, 0.135, 0.295, 0.210,
0.045, 0.070, 0.050, 0.010, 0.035, 0.005, 0.005, 0.075, 0.110, 0.195,
0.080, 0.205, 0.150, 0.045, 0.100, 0.030, 0.025, 0.020, 0.005, 0.035,
0.190, 0.135, 0.165, 0.090, 0.155, 0.105, 0.060, 0.025, 0.015, 0.010,
0.010, 0.040, 0.150, 0.300, 0.135, 0.090, 0.060, 0.110, 0.045, 0.020,
0.030, 0.020, 0.015, 0.025, 0.090, 0.220, 0.295, 0.105, 0.075, 0.040,
0.075, 0.020, 0.010, 0.030, 0.005, 0.035, 0.060, 0.185, 0.305, 0.170,
0.080, 0.070, 0.040, 0.040, 0.005, 0.025, 0.010, 0.010, 0.155, 0.175,
0.225, 0.190, 0.110, 0.025, 0.030, 0.005, 0.015, 0.020, 0.020, 0.030,
0.075, 0.260, 0.140, 0.170, 0.150, 0.090, 0.020, 0.035, 0.010, 0.015,
0.010, 0.025, 0.130, 0.145, 0.315, 0.110, 0.095, 0.085, 0.075, 0.010,
0.005, 0.015, 0.005, 0.010, 0.195, 0.220, 0.150, 0.230, 0.040, 0.060,
0.035, 0.045, 0.000, 0.005, 0.005, 0.015, 0.185, 0.370, 0.165, 0.060,
0.085, 0.030, 0.035, 0.035, 0.015, 0.010, 0.010, 0.000, 0.135, 0.320,
0.285, 0.110, 0.065, 0.035, 0.010, 0.005, 0.015, 0.015, 0.000, 0.005)
```

## Creating Modules in FIMS

Now that we’ve prepared the data, let’s pass it into FIMS. Each module
in the FIMS-R interface is made of S4 objects. These S4 objects serve as
a interface between R and the underlining C++ code that defines FIMS.
Modules are instantiated using the `methods::new()` function. We can use
`methods::show()` to view all the fields (i.e. variables) and methods
(i.e. functions) available in a given module.

### The Fleet Module

#### Fleet Data

Each fleet is required to have data in order to evaluate the objective
function. Currently FIMS only has a fleet module that is used to set up
both fleets and surveys. FIMS contains an Index module and AgeComp
module to pass data objects into the fleet module. Each of these data
modules require a dimension be added to indicate the dimensions of the
raw data (e.g. nyears x nages matrix). Given this information, FIMS is
able to correctly apply dimension folding for model output.

Using the `methods::show()` function, we can see that the Index module
has a vector field named *index_data* and the AgeComp module has a
vector field names *age_comp_data*.

``` r
show(fims$Index)
```

    ## C++ class 'Index' <0x7f93fcfd4150>
    ## Constructors:
    ##     Index(int)
    ## 
    ## Fields: 
    ##     Rcpp::Vector<14, Rcpp::PreserveStorage> index_data
    ## 
    ## Methods: 
    ##      unsigned int get_id()  
    ## 

``` r
show(fims$AgeComp)
```

    ## C++ class 'AgeComp' <0x7f93fcfd4050>
    ## Constructors:
    ##     AgeComp(int, int)
    ## 
    ## Fields: 
    ##     Rcpp::Vector<14, Rcpp::PreserveStorage> age_comp_data
    ## 
    ## Methods: 
    ##      unsigned int get_id()  
    ## 

We’ll create both index and age composition modules for the fleet using
the `methods::new()` function and pass in the data defined above from
the Model Comparison project.

``` r
#fleet index data
fishing_fleet_index <- methods::new(fims$Index, nyears)
#fleet age composition data
fishing_fleet_age_comp <- methods::new(fims$AgeComp, nyears, nages)
fishing_fleet_index$index_data <- fishery_catch
# Effective sampling size is 200
fishing_fleet_age_comp$age_comp_data <- fishery_agecomp * 200
```

#### Fleet Selectivity

Now that we’ve passed in data for the fishing fleet, we need to set up
its selectivity module. We will set this to be selecrivity function
using the LogisticSelectivity module. The`methods::show()` function
indicates this module has two parameter fields: *median* and *slope*,
and an `evaluate()` and `get_id()` function.

Each variable of [Parameter
class](https://github.com/NOAA-FIMS/FIMS/blob/main/inst/include/interface/rcpp/rcpp_objects/rcpp_interface_base.hpp)
has three additional fields: *value*, *is_random_effect*, and
*estimated*. Currently, FIMS is not set up to run random effects. The
default value for this field and the *estimate* field is currently set
to `FALSE`. We can use the *value* field to input variables defined in
the Model Comparison project.

``` r
methods::show(fims$LogisticSelectivity)
```

    ## C++ class 'LogisticSelectivity' <0x7f93fcfd4550>
    ## Constructors:
    ##     LogisticSelectivity()
    ## 
    ## Fields: 
    ##     Parameter median
    ##     Parameter slope
    ## 
    ## Methods: 
    ##      double evaluate(double)  
    ##            
    ##      unsigned int get_id()  
    ## 

``` r
fishing_fleet_selectivity <- methods::new(fims$LogisticSelectivity)
fishing_fleet_selectivity$median$value <- 2.0
fishing_fleet_selectivity$median$is_random_effect <- FALSE
fishing_fleet_selectivity$median$estimated <- TRUE
fishing_fleet_selectivity$slope$value <- 1.0
fishing_fleet_selectivity$slope$is_random_effect <- FALSE
fishing_fleet_selectivity$slope$estimated <- TRUE
```

#### Creating the Fleet Object

Now that we’ve created everything that a fleet needs, lets create the
actual fleet object. First let’s run `methods::show(fims$Fleet)` to see
all the fields and methods available from R.

``` r
show(fims$Fleet)
```

    ## C++ class 'Fleet' <0x7f93fcfd3e50>
    ## Constructors:
    ##     Fleet()
    ## 
    ## Fields: 
    ##     bool estimate_F
    ##     bool estimate_q
    ##     bool is_survey
    ##     Rcpp::Vector<14, Rcpp::PreserveStorage> log_Fmort
    ##     Parameter log_obs_error
    ##     double log_q
    ##     int nages
    ##     int nyears
    ##     bool random_F
    ##     bool random_q
    ## 
    ## Methods: 
    ##      void SetAgeCompLikelihood(int)  
    ##            
    ##      void SetIndexLikelihood(int)  
    ##            
    ##      void SetObservedAgeCompData(int)  
    ##            
    ##      void SetObservedIndexData(int)  
    ##            
    ##      void SetSelectivity(int)  
    ## 

We can see that there are five boolean flags: estimate_F, estimate_q,
and is_survey, random_F, and random_q. THere is a vecotr, log_Fmort, a
Parameter, log_obs_error, and a double, log_q. There are two
integerfields for the number of ages and years. Additionally, there are
five Methods: SetAgeCompLikelihood, SetIndexLikelihood,
SetObservedAgeCompData, SetObservedIndexData, and setSelectivity. The
last three of these will be used to link up the AgeCOmp, Index, and
Selectivity modules defined above with the fleet module defined below.

``` r
#Create fleet module
fishing_fleet <- methods::new(fims$Fleet)
#Set nyears and nages
fishing_fleet$nages <- nages
fishing_fleet$nyears <- nyears
#Set values for log_Fmort
fishing_fleet$log_Fmort <- log(c(0.009459165, 0.02728886, 0.04506364, 
                                 0.06101782, 0.04860075, 0.08742055, 
                                 0.0884472, 0.1866079, 0.109009, 0.1327043, 
                                 0.1506155, 0.161243, 0.1166402, 0.1693461, 
                                 0.1801919, 0.1612405, 0.3145732, 0.2572476, 
                                 0.2548873, 0.2514621, 0.3491014, 0.2541077, 
                                 0.4184781, 0.3457212, 0.3436855, 0.3141712, 
                                 0.3080268, 0.4317453, 0.3280309, 0.4996754))
#Turn on estimation for F
fishing_fleet$estimate_F <- TRUE
fishing_fleet$random_F <- FALSE
# Set value for log_q
fishing_fleet$log_q <- log(1.0)
fishing_fleet$estimate_q <- FALSE
fishing_fleet$random_q <- FALSE
fishing_fleet$log_obs_error$value <- log(sqrt(log(0.01^2+1)))
fishing_fleet$log_obs_error$estimated <- FALSE
#Next two lines not currently used by FIMS
fishing_fleet$SetAgeCompLikelihood(1)
fishing_fleet$SetIndexLikelihood(1)
#Set Index, AgeComp, and Selectivity using the IDs from the modules defined above
fishing_fleet$SetObservedIndexData(fishing_fleet_index$get_id())
fishing_fleet$SetObservedAgeCompData(fishing_fleet_age_comp$get_id())
fishing_fleet$SetSelectivity(fishing_fleet_selectivity$get_id())
```

### The Survey Module

We will now repeat the steps from Fleet to set up the Survey. A survey
object is essentially the same as a fleet object with a catachabilty (q)
variable.

#### Survey Data

``` r
#fleet index data
survey_fleet_index <- methods::new(fims$Index, nyears)
#survey age composition data
survey_fleet_age_comp <- methods::new(fims$AgeComp, nyears, nages)
survey_fleet_index$index_data <- survey_index
# Effective sampling size is 200
survey_fleet_age_comp$age_comp_data <- survey_agecomp * 200
```

#### Survey Selectivity

``` r
survey_fleet_selectivity <- new(fims$LogisticSelectivity)
survey_fleet_selectivity$median$value <- 1.5
survey_fleet_selectivity$median$is_random_effect <- FALSE
survey_fleet_selectivity$median$estimated <- TRUE
survey_fleet_selectivity$slope$value <- 2.0
survey_fleet_selectivity$slope$is_random_effect <- FALSE
survey_fleet_selectivity$slope$estimated <- TRUE
```

#### Creating the Survey Object

``` r
 survey_fleet <- methods::new(fims$Fleet)
 survey_fleet$is_survey<-TRUE
 survey_fleet$nages <- nages
 survey_fleet$nyears <- nyears
 survey_fleet$estimate_F <- FALSE
 survey_fleet$random_F <- FALSE
 survey_fleet$log_q <- log(3.315143e-07)
 survey_fleet$estimate_q <- TRUE
 survey_fleet$random_q <- FALSE
 #sd = sqrt(log(cv^2 + 1)), sd is log transformed
 survey_fleet$log_obs_error$value <- log(sqrt(log(0.2^2+1)))
 survey_fleet$log_obs_error$estimated <- FALSE
 survey_fleet$SetAgeCompLikelihood(1)
 survey_fleet$SetIndexLikelihood(1)
 survey_fleet$SetSelectivity(survey_fleet_selectivity$get_id())
 survey_fleet$SetObservedIndexData(survey_fleet_index$get_id())
 survey_fleet$SetObservedAgeCompData(survey_fleet_age_comp$get_id())
```

### Creating a Population

The final step is to set up the population module. Before doing so, we
first need to set up each component of the population (e.g. recruitment,
growth, etc.).

#### Recruitment

We’ll use a Beverton Holt recruitment module. We first instantiate a
module using the `methods::new()` function. We can use `methods::show()`
to view all the fields (i.e. variables) and methods (i.e. functions)
available in `fims$BevertonHoltRecruitment` module.

``` r
# Recruitment
recruitment <- methods::new(fims$BevertonHoltRecruitment)
methods::show(fims$BevertonHoltRecruitment)
```

    ## C++ class 'BevertonHoltRecruitment' <0x7f93fcfc5a70>
    ## Constructors:
    ##     BevertonHoltRecruitment()
    ## 
    ## Fields: 
    ##     Rcpp::Vector<14, Rcpp::PreserveStorage> deviations
    ##     bool estimate_deviations
    ##     Parameter log_rzero
    ##     Parameter log_sigma_recruit
    ##     Parameter logit_steep
    ##     Rcpp::Vector<14, Rcpp::PreserveStorage> recruitment_bias_adj
    ##     bool use_bias_correction
    ## 
    ## Methods: 
    ##      double evaluate(double, double)  
    ##            
    ##      double evaluate_nll()  
    ##            
    ##      unsigned int get_id()  
    ## 

There are three parameters we need to set-up: *log_sigma_recruit*,
*log_rzero*, and *logit_steep*.

``` r
recruitment$log_sigma_recruit$value <- log(0.4)
recruitment$log_rzero$value <- log(1e+06)
recruitment$log_rzero$is_random_effect <- FALSE
recruitment$log_rzero$estimated <- TRUE
recruitment$logit_steep$value <- -log(1.0 - 0.75) + log(0.75 - 0.2)
recruitment$logit_steep$is_random_effect <- FALSE
recruitment$logit_steep$estimated <- FALSE
```

We also need to set up recruitment deviations. FIMS recruitment modules
have a boolean, *estimate_deviations* to specify whether or not
deviations are estimated; and a vector, *deviations* to set the
deviation values. The *deviations* vector takes values greater than 0 as
these will be logged in the likelihood.

``` r
recruitment$estimate_deviations <- TRUE
recruitment$deviations <- c(1.0931337, 1.5494153, 0.8754735, 0.6488721,
                            1.9128839, 1.6593211, 0.9327825, 1.3531871, 
                            0.9207434, 1.2304792, 1.1652038, 0.8048559, 
                            0.8752845, 1.1187967, 0.8989675, 1.3083559, 
                            1.2724463, 0.5799534, 0.7891447, 0.5571984, 
                            1.3515173, 1.2452116, 0.8002613, 0.5983474, 
                            1.1704664, 0.5828168, 0.8223697, 1.2225558,
                            1.4513402, 0.9308739)
```

#### Growth

Now, we’ll define the growth module for our population using an
empirical weight at age model.

``` r
# Growth
ewaa_growth <- methods::new(fims$EWAAgrowth)
ewaa_growth$ages <- ages
ewaa_growth$weights <- c(0.0005306555, 0.0011963283, 0.0020582654,
                         0.0030349873, 0.0040552124, 0.0050646975,
                         0.0060262262, 0.0069169206, 0.0077248909,
                         0.0084461128, 0.0090818532, 0.0096366950)
```

#### Maturity

Each population will also need a maturity model. Here we define a
logistic maturity model.

``` r
# Maturity
maturity <- new(fims$LogisticMaturity)
maturity$median$value <- 2.25
maturity$median$is_random_effect <- FALSE
maturity$median$estimated <- FALSE
maturity$slope$value <- 3
maturity$slope$is_random_effect <- FALSE
maturity$slope$estimated <- FALSE
```

Now that our life history sub-models are defined, lets define the actual
population.

``` r
# Population
population <- new(fims$Population)
population$log_M <- rep(log(0.2), nages)
population$estimate_M <- FALSE
population$log_init_naa <- log(c(993947.5,811707.8, 661434.4, 
                                 537804.8, 436664.0, 354303.4, 
                                 287397.0, 233100.2, 189054.0, 
                                 153328.4, 124353.2, 533681.3))
population$estimate_init_naa <- TRUE
population$nages <- nages
population$ages <- ages
population$nfleets <- 2 # 1 fleet and 1 survey
population$nseasons <- 1
population$nyears <- nyears
population$prop_female <- 0.5
```

Now we need to link up the recruitment, growth, and maturity modules we
set above with this new population module. We do this by calling
`get_id()` from each respective module and passing that unique ID into
each respective `Set` function from population.

``` r
population$SetMaturity(maturity$get_id())
```

    ## Warning in population$SetMaturity(maturity$get_id()): maturity has been set
    ## already.

    ## Now you are resetting maturity with maturity ID of 1

``` r
population$SetGrowth(ewaa_growth$get_id())
```

    ## Warning in population$SetGrowth(ewaa_growth$get_id()): growth has been set
    ## already.

    ## Now you are resetting growth with growth ID of 1

``` r
population$SetRecruitment(recruitment$get_id())
```

    ## Warning in population$SetRecruitment(recruitment$get_id()): recruitment has
    ## been set already.

    ## Now you are resetting recruitment with recruitment ID of 1

## Putting It All Together

### Creating the FIMS Model and Making the TMB Function

``` r
  sucess<-fims$CreateTMBModel()
  parameters <- list(p = fims$get_fixed())
  obj <- MakeADFun(data=list(), parameters, DLL="FIMS", silent = TRUE)
```

## Fitting the Model

``` r
  # 
  # opt <- nlminb(obj$par, obj$fn, obj$gr,
  #               control = list(eval.max = 800, iter.max = 800))#, method = "BFGS",
                    #   control = list(maxit=1000000, reltol = 1e-15))
  opt<-minimizR::minimize(obj$par, obj$fn, obj$gr, 
                       control = list(max_iterations=10000000, tolerance = 1e-8))
  print(opt)
```

    ## $method
    ## [1] "l-bfgs"
    ## 
    ## $converged
    ## [1] FALSE
    ## 
    ## $`bounded problem`
    ## [1] FALSE
    ## 
    ## $message
    ## [1] "max line searches"
    ## 
    ## $iterations
    ## [1] 195
    ## 
    ## $`runtime (seconds)`
    ## [1] 0.127704
    ## 
    ## $`function value`
    ## [1] 2286.667
    ## 
    ## $`norm gradient`
    ## [1] 51.15447
    ## 
    ## $`max gradient component`
    ## [1] 21.41043
    ## 
    ## $gradient
    ##  [1]  -7.14853006 -13.66442909   7.06009694   2.33383728  21.41042666
    ##  [6]  -9.77122648   2.49469715  -3.01517917  -6.47973479   2.35373462
    ## [11]  -4.18361269   3.00333113   5.42592271   2.73103247  -8.20150863
    ## [16]   5.54470548   0.59610504  -6.50845626 -11.63290922  -4.29255166
    ## [21]   8.33487359   7.75146191  -9.61363679  -1.56483287   1.92394037
    ## [26]   2.77611184  -2.30279093  -6.59472710   8.61904748  -6.48428771
    ## [31]  -4.40372978   8.20302326   1.32817104  11.68183911  -1.74014655
    ## [36]  -8.66274888   0.08004948   7.08212784   0.14714161   0.95458048
    ## [41]  -0.67831133   1.41069988   1.36481669   3.95099224   0.68120924
    ## [46]   1.52203787  -0.88881295   0.49896362  -2.07329216  -1.34755696
    ## [51]  -2.38860396  -0.81121585  -0.83315979  -0.09181508  13.26175552
    ## [56]  11.62967950  -1.97039484  -0.87251609   0.69542597   0.11102989
    ## [61]  -1.16031229  -2.52216875   0.13339001   3.75446264   6.10356128
    ## [66]   2.48732774  -5.02975975   4.69945781   2.77050180  -0.28006653
    ## [71]  -4.13780528   2.95169645   3.95341747  -1.43156780  -0.66684827
    ## [76]   8.04528596  -2.53483273   2.30502799
    ## 
    ## $`parameter values`
    ##  [1] 14.2927002  0.7960849 -5.1030404 -3.8468960 -3.2007444 -2.7833743
    ##  [7] -2.9282224 -2.2771962 -2.2154670 -1.4479100 -1.9907427 -1.7543869
    ## [13] -1.6287244 -1.5591916 -1.8552679 -1.4596901 -1.4275993 -1.5534267
    ## [19] -0.9357670 -1.1941777 -1.2468178 -1.3129352 -1.1066471 -1.5135808
    ## [25] -1.0965904 -1.4009549 -1.5108643 -1.6947236 -1.7627624 -1.5467992
    ## [31] -1.9146807 -1.5551087 28.4788059  0.7632491  1.0482430 23.2845214
    ## [37]  1.0130597  4.2836668  1.8542581  1.2217789  3.5783862  2.8455446
    ## [43]  1.5119473  2.1682417  1.4973817  1.9587028  1.6457626  1.1174632
    ## [49]  1.2490792  1.5358893  1.1009702  1.6621149  1.7993664  0.7842906
    ## [55]  1.1569873  0.9101849  2.0595723  2.0041177  1.4734997  1.1630790
    ## [61]  2.1274344  1.1918434  1.6709164  2.6903622  2.6794992  1.2806454
    ## [67] 24.2385336 23.5982371 22.7626818 21.7504949 20.7614674 19.8643195
    ## [73] 19.1029940 18.0252158 17.4020729 16.5639779 15.6199837 15.9779437

### TMB Reporting

``` r
 sdr <- TMB::sdreport(obj)
 sdr_fixed <- summary(sdr, "fixed")
```

    ## Warning in sqrt(diag(object$cov.fixed)): NaNs produced

``` r
 report <- obj$report()
  
 print(sdr_fixed)
```

    ##         Estimate  Std. Error
    ##  [1,] 14.2927002 0.575376559
    ##  [2,]  0.7960849 0.005590982
    ##  [3,] -5.1030404 0.839072194
    ##  [4,] -3.8468960 0.837700780
    ##  [5,] -3.2007444 0.836789836
    ##  [6,] -2.7833743 0.836596105
    ##  [7,] -2.9282224 0.836779019
    ##  [8,] -2.2771962 0.836888660
    ##  [9,] -2.2154670 0.837549543
    ## [10,] -1.4479100 0.838773075
    ## [11,] -1.9907427 0.839517639
    ## [12,] -1.7543869 0.839716307
    ## [13,] -1.6287244 0.840540340
    ## [14,] -1.5591916 0.841431265
    ## [15,] -1.8552679 0.841506862
    ## [16,] -1.4596901 0.842930126
    ## [17,] -1.4275993 0.843904355
    ## [18,] -1.5534267 0.843937633
    ## [19,] -0.9357670 0.846343751
    ## [20,] -1.1941777 0.848668301
    ## [21,] -1.2468178 0.849320676
    ## [22,] -1.3129352 0.850170162
    ## [23,] -1.1066471 0.851154842
    ## [24,] -1.5135808 0.852021488
    ## [25,] -1.0965904 0.853027579
    ## [26,] -1.4009549 0.853786220
    ## [27,] -1.5108643 0.854071015
    ## [28,] -1.6947236 0.854483477
    ## [29,] -1.7627624 0.854639059
    ## [30,] -1.5467992 0.855489948
    ## [31,] -1.9146807 0.856518391
    ## [32,] -1.5551087 0.857104173
    ## [33,] 28.4788059         NaN
    ## [34,]  0.7632491 0.001180916
    ## [35,]  1.0482430         NaN
    ## [36,] 23.2845214 0.668707102
    ## [37,]  1.0130597 0.407878315
    ## [38,]  4.2836668 0.561300296
    ## [39,]  1.8542581 0.240451080
    ## [40,]  1.2217789 0.163889700
    ## [41,]  3.5783862 0.428688891
    ## [42,]  2.8455446 0.343754166
    ## [43,]  1.5119473 0.189309331
    ## [44,]  2.1682417 0.264545322
    ## [45,]  1.4973817 0.182802985
    ## [46,]  1.9587028 0.231485714
    ## [47,]  1.6457626 0.192829059
    ## [48,]  1.1174632 0.134835670
    ## [49,]  1.2490792 0.146422736
    ## [50,]  1.5358893 0.175669179
    ## [51,]  1.1009702 0.128217551
    ## [52,]  1.6621149 0.187035723
    ## [53,]  1.7993664 0.201042969
    ## [54,]  0.7842906 0.095047893
    ## [55,]  1.1569873 0.141116669
    ## [56,]  0.9101849 0.113646305
    ## [57,]  2.0595723 0.229075546
    ## [58,]  2.0041177 0.224861088
    ## [59,]  1.4734997 0.172821385
    ## [60,]  1.1630790 0.142330382
    ## [61,]  2.1274344 0.250227953
    ## [62,]  1.1918434 0.149774884
    ## [63,]  1.6709164 0.212427036
    ## [64,]  2.6903622 0.355091510
    ## [65,]  2.6794992 0.389543766
    ## [66,]  1.2806454 0.225039867
    ## [67,] 24.2385336 0.648809235
    ## [68,] 23.5982371 0.648481288
    ## [69,] 22.7626818 0.648525498
    ## [70,] 21.7504949 0.649253990
    ## [71,] 20.7614674 0.650882994
    ## [72,] 19.8643195 0.652523803
    ## [73,] 19.1029940 0.653652961
    ## [74,] 18.0252158 0.658022523
    ## [75,] 17.4020729 0.659598942
    ## [76,] 16.5639779 0.666985630
    ## [77,] 15.6199837 0.690035775
    ## [78,] 15.9779437 0.668084887

## Plotting Results

``` r
library(ggplot2)
index_results <- data.frame(observed = survey_fleet_index$index_data,
                            expected = report$expected_index[,2])
print(index_results)
```

    ##     observed  expected
    ## 1  1.4954227 3.0142428
    ## 2  1.3984219 2.2390882
    ## 3  1.3830646 1.5468471
    ## 4  1.3283436 1.3385364
    ## 5  1.6661698 1.3626207
    ## 6  1.7207124 1.3401164
    ## 7  1.6260367 1.2773662
    ## 8  1.5601564 1.2186041
    ## 9  1.3449506 1.1928133
    ## 10 1.4388148 1.1145442
    ## 11 1.2424599 0.9544742
    ## 12 1.1319582 0.9651222
    ## 13 1.0190276 0.9637268
    ## 14 1.0786289 0.6445634
    ## 15 0.9825925 0.2736872
    ## 16 1.0596290 0.2889691
    ## 17 0.8478522 0.3268638
    ## 18 0.8838522 0.3600567
    ## 19 0.8672307 0.3028863
    ## 20 0.7067724 0.3357420
    ## 21 0.5996621 0.3788233
    ## 22 0.6059520 0.4285880
    ## 23 0.7583969 0.4763130
    ## 24 0.5588667 0.5052877
    ## 25 0.6109791 0.5249186
    ## 26 0.5049970 0.4476358
    ## 27 0.4737896 0.4135320
    ## 28 0.4900692 0.3512250
    ## 29 0.4497269 0.3284711
    ## 30 0.6177159 0.3025806

``` r
ggplot(index_results, aes(x=1:nyears, y=observed)) + geom_point() +
         xlab("Year") + ylab("Index") +
  geom_line(aes(x=1:nyears, y=expected, col = "blue")) +
  theme_bw()
```

![](fims-demo_files/figure-gfm/plots-1.png)<!-- -->

``` r
catch_results <- data.frame(observed = fishing_fleet_index$index_data,
                            expected = report$expected_index[,1])
print(catch_results)
```

    ##     observed  expected
    ## 1   160.2363  144.6794
    ## 2   460.6336  280.3724
    ## 3   752.1299  436.9909
    ## 4   996.9872  701.5759
    ## 5   769.6972  615.2800
    ## 6  1352.7309 1156.6561
    ## 7  1317.7236 1177.1900
    ## 8  2626.0240 2441.3928
    ## 9  1415.1162 1309.4271
    ## 10 1666.0168 1548.2577
    ## 11 1751.8060 1616.3715
    ## 12 1739.5435 1716.8352
    ## 13 1208.5391  965.0465
    ## 14 1647.6643  524.3503
    ## 15 1593.6254  564.7708
    ## 16 1343.2277  518.6234
    ## 17 2337.0098 1064.9705
    ## 18 1685.7172  634.6707
    ## 19 1529.8325  710.4994
    ## 20 1359.5044  749.0330
    ## 21 1637.5099 1045.6713
    ## 22 1081.9126  788.8387
    ## 23 1648.7687 1329.6200
    ## 24 1230.1199  976.4783
    ## 25 1133.8784  858.0263
    ## 26  956.5872  629.4187
    ## 27  911.0781  473.2370
    ## 28 1172.4887  475.4197
    ## 29  852.1934  312.6199
    ## 30 1278.3228  307.7998

``` r
ggplot(catch_results, aes(x=1:nyears, y=observed)) + geom_point() +
         xlab("Year") + ylab("Index") +
  geom_line(aes(x=1:nyears, y=expected, col = "blue")) +
  theme_bw()
```

![](fims-demo_files/figure-gfm/plots-2.png)<!-- -->

## Clear C++ objects from memory

``` r
fims$clear()
```
