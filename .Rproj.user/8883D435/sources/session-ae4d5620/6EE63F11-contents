---
title: "Introducing the Fisheries Integrated Modeling System (FIMS)"
output: github_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Fisheries Integrated Modeling System

The NOAA Fisheries Integrated Modeling System (FIMS) is a new modeling framework for fisheries modeling. FIMS is a software system designed and architected to support next-generation fisheries stock assessment, ecosystem, and socioeconomic modeling. It's important to note that FIMS itself is not a model, but rather a framework for creating models. The framework is made up of many modules that come together to create a "the best model" that suites the needs of the end-user. What follows is a demo of creating an assessment model using FIMS.

## Creating Models in FIMS

To begin, we import the FIMS library and define some important variables that describe the dimensions of our data.

```{r fims1}
library(FIMS)
library(TMB)
library(minimizR)

#load the module
fims <- Rcpp::Module("fims", PACKAGE = "FIMS")
fims$clear()

#use FIMS data frame
# data(package = "FIMS")
# age_frame <- FIMS::FIMSFrameAge(data_mile1)

nyears <- 30 #age_frame@nyrs  # the number of years which we have data for.
nseanons<-1 # the number of seasons in each year.
ages <- c(1 ,2, 3,4,5,6,7,8,9,10,11, 12) #age_frame@ages # age vector.
nages <- 12 #max(age_frame@ages)   # the number of age groups.

# fleet_names_agecomp <- dplyr::filter(
#   .data = as.data.frame(age_frame@data),
#   type == "age"
# ) %>%
#   dplyr::distinct(name) %>%
#   dplyr::pull(name)
# nagecomp <- length(fleet_names_agecomp)
# 
# fleet_names_index <- dplyr::filter(
#   .data = as.data.frame(age_frame@data),
#   type == "index"
# ) %>%
#   dplyr::distinct(name) %>%
#   dplyr::pull(name)
# nindex <- length(fleet_names_index)
# 
#   indexdat <- vector(mode = "list", length = nindex)
#   names(indexdat) <- fleet_names_index

  # for (index_i in 1:nindex) {
  #   index <- fims$Index
  #   indexdat[[fleet_names_index[index_i]]] <- new(index, nyears)
  #   indexdat[[fleet_names_index[index_i]]] <-
  #     m_index(age_frame, fleet_names_index[index_i])
  # }

```

## Creating a Population

Each module in the FIMS-R interface is made of S4 objects. These S4 objects serve as a interface between R and the underlining C++ code that defines FIMS. Let's now define a population.

### Recruitment

We'll start with a recruitment module.

```{r recruitment}
# Recruitment
recruitment <- new(fims$BevertonHoltRecruitment)
recruitment$log_sigma_recruit$value <- log(0.4)
recruitment$log_rzero$value <- log(1e+06)
recruitment$log_rzero$is_random_effect <- FALSE
recruitment$log_rzero$estimated <- TRUE
recruitment$logit_steep$value <- -log(1.0 - 0.75) + log(0.75 - 0.2)
recruitment$logit_steep$is_random_effect <- FALSE
recruitment$logit_steep$estimated <- FALSE
recruitment$estimate_deviations <- FALSE
recruitment$deviations <- rep(0.01,30)

```

### Growth

Now, we'll define the growth module for our population using an emprical weight at age model.

```{r growth}
# Growth
ewaa_growth <- new(fims$EWAAgrowth)
ewaa_growth$ages <- ages
ewaa_growth$weights <- c(0.5306555, 1.1963283, 2.0582654, 
                         3.0349873, 4.0552124, 5.0646975,
                         6.0262262, 6.9169206,  7.7248909, 
                         8.4461128, 9.0818532, 9.6366950)

```

### Maturity

Each population will also need a maturity model. Here we define a logistic maturity model.

```{r maturity}
# Maturity
maturity <- new(fims$LogisticMaturity)
maturity$median$value <- 2.25
maturity$median$is_random_effect <- FALSE
maturity$median$estimated <- FALSE
maturity$slope$value <- 3
maturity$slope$is_random_effect <- FALSE
maturity$slope$estimated <- FALSE
```

Now that our life history sub-models are defined, lets define the actual population.

```{r population}
# Population
population <- new(fims$Population)
population$log_M <- rep(log(0.2), nages)
population$log_init_naa <- log(c(993947.5,811707.8, 661434.4, 
                                 537804.8, 436664.0, 354303.4, 
                                 287397.0, 233100.2, 189054.0, 
                                 153328.4, 124353.2, 533681.3))
population$estimate_init_naa <- FALSE
population$nages <- nages
population$ages <- ages
population$nfleets <- 1
population$nseasons <- 1
population$nyears <- nyears
population$SetMaturity(maturity$get_id())
population$SetGrowth(ewaa_growth$get_id())
population$SetRecruitment(recruitment$get_id())

```

## Creating a Fleet

Now that we've defined our population, lets create a fleet. \### Fleet Data Each fleet is required to have data in order to evaluate the objective function. For this example, we'll create both index and age composition data for the fleet to use.

```{r fleet_data}
#fleet index data
fishing_fleet_index <- new(fims$Index, nyears)
fishing_fleet_index$index_data <-
  c(
    161.0209,
    462.6704,
    752.5893,
    990.4719,
    767.5680,
    1342.6760,
    1320.4303,
    2621.7667,
    1424.2983,
    1655.4339,
    1762.7849,
    1753.7154,
    1197.6424,
    1635.5958,
    1596.6087,
    1336.5701,
    2352.9983,
    1691.9737,
    1526.3070,
    1356.1707,
    1639.3456,
    1077.0756,
    1642.2114,
    1220.4527,
    1123.7597,
    961.4341,
    902.1445,
    1167.9457,
    851.6286,
    1277.4184
  )

#fleet age composition data
fishing_fleet_age_comp <- new(fims$AgeComp, nyears, nages)
fishing_fleet_age_comp$age_comp_data <- 
  c(0.06850328,0.1038966,0.1236552,0.1210534,0.1062626,0.08887275,
0.07291538,0.0593899,0.04824275,0.03914874,0.03175732,0.1363021,
0.1027769,0.1004049,0.1192627,0.1166035,0.1022935,0.08553161,
0.07016737,0.05714956,0.04642229,0.03767127,0.03055874,0.1311577,
0.05849454,0.1556373,0.1185907,0.1153229,0.1008387,0.0841864,
0.06902094,0.05620249,0.04564895,0.0370425,0.03004833,0.1289663,
0.04539611,0.09154689,0.1892468,0.117668,0.1021384,0.08491672,
0.06948834,0.05654024,0.04591004,0.03725037,0.03021575,0.1296823,
0.1313104,0.06637682,0.1039419,0.1751528,0.09713002,0.08012914,
0.06528608,0.05301708,0.04301555,0.03489144,0.02829916,0.1214495,
0.1095769,0.1886934,0.07386106,0.09416401,0.1414713,0.07455554,
0.06027489,0.04873505,0.03946391,0.03198549,0.02593452,0.1112839,
0.06227129,0.1635249,0.2170125,0.06882838,0.07799228,0.1111902,
0.05738959,0.04603236,0.03711024,0.030018,0.02431987,0.1043105,
0.09325032,0.093674,0.1875435,0.2002648,0.05626676,0.0604187,
0.08431651,0.04316854,0.03452163,0.02779966,0.02247759,0.096298,
0.06939175,0.1459531,0.1113883,0.1782526,0.1677267,0.04453445,
0.04675636,0.06469573,0.03301804,0.02637339,0.02122884,0.09068068,
0.09521023,0.1050118,0.1689576,0.1038815,0.1472861,0.1313223,
0.03413025,0.03554376,0.04903305,0.0249966,0.01995801,0.08466889,
0.09419731,0.1442282,0.1211014,0.1563235,0.08494411,0.1139899,
0.09943685,0.02563011,0.02660946,0.0366663,0.01868431,0.07818854,
0.06975364,0.1460515,0.1696754,0.113967,0.1297857,0.0666933,
0.08753313,0.07571799,0.01945552,0.02017559,0.02778896,0.07340229,
0.08081362,0.107745,0.1717811,0.1599299,0.09482732,0.1021437,
0.05133946,0.06681847,0.05761919,0.01478802,0.01532882,0.07686541,
0.1063761,0.1216016,0.1234139,0.1579679,0.1300651,0.07301843,
0.07696323,0.03836646,0.04978157,0.04287938,0.01100045,0.06856584,
0.0908321,0.1621817,0.1400625,0.1133024,0.1276705,0.09931219,
0.05450787,0.05696262,0.02830574,0.03668429,0.03158434,0.05859374,
0.1326196,0.1314124,0.1773926,0.122105,0.08693333,0.09253051,
0.07036372,0.03828884,0.03988541,0.01979637,0.02564497,0.06302738,
0.1300496,0.1904382,0.1406887,0.1501582,0.09065881,0.06089164,
0.06332944,0.04773776,0.02589222,0.02693941,0.01336493,0.05985115,
0.06706301,0.2015445,0.2172311,0.1249552,0.1157245,0.06556313,
0.04293307,0.04422426,0.03321709,0.01799261,0.01871118,0.05084044,
0.09892782,0.1028645,0.2292159,0.1937902,0.09719547,0.0846651,
0.04681024,0.03037065,0.03117648,0.02338706,0.01266207,0.04893445,
0.07877254,0.1565778,0.1207959,0.2112496,0.1557747,0.07349518,
0.06248035,0.03422709,0.0221305,0.02268888,0.01701212,0.04479543,
0.1937409,0.1120838,0.1636893,0.09850957,0.1498394,0.1038223,
0.0477854,0.04024404,0.02196903,0.01418638,0.01453741,0.03959238,
0.174238,0.261354,0.1108504,0.1255238,0.06536564,0.09317049,
0.06290467,0.02866909,0.02405635,0.01311449,0.008464387,0.03228873,
0.1102996,0.24352,0.2663843,0.08771188,0.08618601,0.04213116,
0.05856157,0.03916321,0.01778565,0.01490447,0.00812136,0.02523078,
0.0956373,0.1666404,0.2648488,0.2212958,0.06249948,0.05731696,
0.02725725,0.0374928,0.02497597,0.01132632,0.009486488,0.02122248,
0.1891266,0.1330186,0.1684084,0.206394,0.1488462,0.0393535,
0.03515311,0.01655112,0.02268192,0.01508892,0.006839194,0.01853843,
0.09959471,0.2759409,0.1414871,0.1384331,0.1465926,0.09901339,
0.02550294,0.02255612,0.01058096,0.01448057,0.009628214,0.01618933,
0.1425202,0.1408522,0.2857294,0.1136929,0.09637288,0.09570247,
0.06300624,0.01607167,0.01416332,0.006635076,0.009075958,0.01617776,
0.2084918,0.1885971,0.1348439,0.2107394,0.07240976,0.05748458,
0.05561424,0.0362534,0.009213551,0.008108497,0.003796677,0.014447,
0.2280418,0.2563335,0.1669481,0.09112516,0.1220816,0.03913692,
0.03022117,0.02893199,0.01878627,0.004767499,0.00419346,0.009432482,
0.1392299,0.298398,0.2404066,0.1198067,0.05626113,0.07047664,
0.02199718,0.01681464,0.01603673,0.01039855,0.002637544,0.007536435)

```

### Fleet Selectivity

```{r fleet_selectivity}
fishing_fleet_selectivity <- new(fims$LogisticSelectivity)
fishing_fleet_selectivity$median$value <- 2.0
fishing_fleet_selectivity$median$is_random_effect <- FALSE
fishing_fleet_selectivity$median$estimated <- TRUE
fishing_fleet_selectivity$slope$value <- 1.0
fishing_fleet_selectivity$slope$is_random_effect <- FALSE
fishing_fleet_selectivity$slope$estimated <- TRUE
```
### Fleet Likelihood Components

### Creating the Fleet Object

Now that we've created everything that a fleet needs, lets create the actual fleet object.

```{r fleet}
fishing_fleet <- new(fims$Fleet)
fishing_fleet$nages <- nages
fishing_fleet$nyears <- nyears
fishing_fleet$log_Fmort <- log(
  c(
    0.009459165,
    0.02728886,
    0.04506364,
    0.06101782,
    0.04860075,
    0.08742055,
    0.0884472,
    0.1866079,
    0.109009,
    0.1327043,
    0.1506155,
    0.161243,
    0.1166402,
    0.1693461,
    0.1801919,
    0.1612405,
    0.3145732,
    0.2572476,
    0.2548873,
    0.2514621,
    0.3491014,
    0.2541077,
    0.4184781,
    0.3457212,
    0.3436855,
    0.3141712,
    0.3080268,
    0.4317453,
    0.3280309,
    0.4996754
  )
)
fishing_fleet$estimate_F <- TRUE
fishing_fleet$random_F <- FALSE
fishing_fleet$log_q <- 1.0
fishing_fleet$estimate_q <- FALSE
fishing_fleet$random_q <- FALSE
fishing_fleet$SetAgeCompLikelihood(1)
fishing_fleet$SetIndexLikelihood(1)
fishing_fleet$SetSelectivity(fishing_fleet_selectivity$get_id())
fishing_fleet$SetObservedIndexData(fishing_fleet_index$get_id())
fishing_fleet$SetObservedAgeCompData(fishing_fleet_age_comp$get_id())
```

## Creating a Survey

A survey object is essentially the same as a fleet object with a catachabilty (q) variable.

### Survey Selectivity

```{r survey_selectivity}
  # survey_fleet_selectivity <- new(fims$LogisticSelectivity)
  # survey_fleet_selectivity$median$value <- 2.0
  # survey_fleet_selectivity$median$is_random_effect <- FALSE
  # survey_fleet_selectivity$median$estimated <- TRUE
  # survey_fleet_selectivity$slope$value <- 1.0
  # survey_fleet_selectivity$slope$is_random_effect <- FALSE
  # survey_fleet_selectivity$slope$estimated <- TRUE
```

### Creating the Survey Object

```{r survey}
 # survey_fleet <- new(fims$Fleet)
 # survey_fleet$is_survey<-TRUE
 # #survey_fleet$nages <- om_input$nages
 # survey_fleet$nyears <- om_input$nyr
 #  # survey_fleet$log_Fmort <- rep(log(0.0000000000000000000000000001), om_input$nyr) #-Inf?
 # survey_fleet$estimate_F <- FALSE
 # survey_fleet$random_F <- FALSE
 # survey_fleet$log_q <- log(om_output$survey_q$survey1)
 # survey_fleet$estimate_q <- TRUE
 # survey_fleet$random_q <- FALSE
 # survey_fleet$log_obs_error$value <- log(sqrt(log(em_input$cv.survey$survey1^2+1)))
 # survey_fleet$log_obs_error$estimated <- FALSE
 # survey_fleet$SetAgeCompLikelihood(1)
 # survey_fleet$SetIndexLikelihood(1)
 # survey_fleet$SetSelectivity(survey_fleet_selectivity$get_id())
 # survey_fleet$SetObservedIndexData(survey_fleet_index$get_id())
 # survey_fleet$SetObservedAgeCompData(survey_fleet_age_comp$get_id())
  
```

## Putting It All Together

## Creating the FIMS Model and Making the TMB Function

```{r model}
  sucess<-fims$CreateTMBModel()
  parameters <- list(p = fims$get_fixed())
  obj <- MakeADFun(data=list(), parameters = 
                     parameters, DLL="FIMS", silent = TRUE)

```

## Fitting the Model

```{r fit_model}
  
  # opt<-optim(obj$par, obj$fn, obj$gr, method = "BFGS",
  #                      control = list(maxit=1000000, reltol = 1e-15))
  opt<-minimizR::minimize(obj$par, obj$fn, obj$gr, 
                       control = list(max_iterations=10000000, tolerance = 1e-8))
  print(opt)
```

### TMB Reporting

```{r tmb_report}

 # sdr <- TMB::sdreport(obj)
  # sdr_fixed <- summary(sdr, "fixed")
  report <- obj$report()
  
  # print(sdr_fixed)
   print(report)
  
```

## Plotting Results

```{r plots}
print(fishing_fleet_index$index_data)
print(report$expected_index)

plot(1:nyears, fishing_fleet_index$index_data, xlab="Year", ylab="Index")
lines( report$expected_index,lty=3,lwd=2,col="blue")

length(fishing_fleet$log_Fmort)
```
